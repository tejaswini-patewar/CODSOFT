import tkinter as tk
from tkinter import messagebox
import sqlite3

# Database setup
conn = sqlite3.connect("contacts.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS contacts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        phone TEXT UNIQUE,
        email TEXT,
        address TEXT
    )
""")
conn.commit()

# Functions
def add_contact():
    name = entry_name.get()
    phone = entry_phone.get()
    email = entry_email.get()
    address = entry_address.get()
    if name and phone:
        try:
            cursor.execute("INSERT INTO contacts (name, phone, email, address) VALUES (?, ?, ?, ?)",
                           (name, phone, email, address))
            conn.commit()
            messagebox.showinfo("Success", "Contact added successfully!")
            clear_entries()
            display_contacts()
        except sqlite3.IntegrityError:
            messagebox.showerror("Error", "Phone number already exists.")
    else:
        messagebox.showerror("Error", "Name and phone are required fields.")

def display_contacts():
    listbox_contacts.delete(0, tk.END)
    cursor.execute("SELECT name, phone FROM contacts")
    for contact in cursor.fetchall():
        listbox_contacts.insert(tk.END, f"{contact[0]} - {contact[1]}")

def search_contact():
    search_term = entry_search.get()
    listbox_contacts.delete(0, tk.END)
    cursor.execute("SELECT name, phone FROM contacts WHERE name LIKE ? OR phone LIKE ?", (f'%{search_term}%', f'%{search_term}%'))
    for contact in cursor.fetchall():
        listbox_contacts.insert(tk.END, f"{contact[0]} - {contact[1]}")

def delete_contact():
    selected_contact = listbox_contacts.get(tk.ACTIVE)
    if selected_contact:
        name, phone = selected_contact.split(" - ")
        cursor.execute("DELETE FROM contacts WHERE phone=?", (phone,))
        conn.commit()
        display_contacts()
        messagebox.showinfo("Success", "Contact deleted successfully!")
    else:
        messagebox.showerror("Error", "Please select a contact to delete.")

def update_contact():
    selected_contact = listbox_contacts.get(tk.ACTIVE)
    if selected_contact:
        name, phone = selected_contact.split(" - ")
        new_name = entry_name.get()
        new_phone = entry_phone.get()
        new_email = entry_email.get()
        new_address = entry_address.get()
        cursor.execute("UPDATE contacts SET name=?, phone=?, email=?, address=? WHERE phone=?",
                       (new_name, new_phone, new_email, new_address, phone))
        conn.commit()
        messagebox.showinfo("Success", "Contact updated successfully!")
        display_contacts()
    else:
        messagebox.showerror("Error", "Please select a contact to update.")

def clear_entries():
    entry_name.delete(0, tk.END)
    entry_phone.delete(0, tk.END)
    entry_email.delete(0, tk.END)
    entry_address.delete(0, tk.END)

# GUI setup
root = tk.Tk()
root.title("Contact Management System")

# Input fields
tk.Label(root, text="Name").grid(row=0, column=0)
entry_name = tk.Entry(root)
entry_name.grid(row=0, column=1)

tk.Label(root, text="Phone").grid(row=1, column=0)
entry_phone = tk.Entry(root)
entry_phone.grid(row=1, column=1)

tk.Label(root, text="Email").grid(row=2, column=0)
entry_email = tk.Entry(root)
entry_email.grid(row=2, column=1)

tk.Label(root, text="Address").grid(row=3, column=0)
entry_address = tk.Entry(root)
entry_address.grid(row=3, column=1)

# Buttons
tk.Button(root, text="Add Contact", command=add_contact).grid(row=4, column=0)
tk.Button(root, text="Update Contact", command=update_contact).grid(row=4, column=1)
tk.Button(root, text="Delete Contact", command=delete_contact).grid(row=4, column=2)
tk.Button(root, text="Clear", command=clear_entries).grid(row=4, column=3)

# Search
tk.Label(root, text="Search").grid(row=5, column=0)
entry_search = tk.Entry(root)
entry_search.grid(row=5, column=1)
tk.Button(root, text="Search", command=search_contact).grid(row=5, column=2)

# Contacts List
listbox_contacts = tk.Listbox(root, width=50)
listbox_contacts.grid(row=6, column=0, columnspan=4)

# Display all contacts on start
display_contacts()

# Run the application
root.mainloop()

# Close the database connection on exit
conn.close()
